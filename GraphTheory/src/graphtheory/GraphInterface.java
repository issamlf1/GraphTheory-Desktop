/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package graphtheory;

import Algorithm.*;
import java.awt.BorderLayout;

import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.GridLayout;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Toolkit;
import java.awt.geom.Ellipse2D;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

/**
 *
 * @author lanfouf
 */
public class GraphInterface extends javax.swing.JFrame {
    
    public GraphInterface() {
        initComponents();
        
        //affichage sure l'ecran
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        this.setSize(screenSize.width-50,screenSize.height-70);
        this.setLocationRelativeTo(null);
        this.setResizable(false);
        this.jDialog2.setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        jTextArea2.setLineWrap(true);
        jTextArea2.setWrapStyleWord(true);
        jTextArea2.setEditable(false);
        jTextArea1.setLineWrap(true);
        jTextArea1.setWrapStyleWord(true);
        jTextArea1.setEditable(false);
        this.jDialog3.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        this.jDialog7.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
    }   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        U = new javax.swing.JTextField();
        V = new javax.swing.JTextField();
        C = new javax.swing.JTextField();
        jButton12 = new javax.swing.JButton();
        jButton13 = new javax.swing.JButton();
        jDialog2 = new javax.swing.JDialog();
        pan1 = new javax.swing.JPanel();
        pan2 = new javax.swing.JPanel();
        s = new javax.swing.JButton();
        valider = new javax.swing.JButton();
        jDialog3 = new javax.swing.JDialog();
        jLabel6 = new javax.swing.JLabel();
        leflot = new javax.swing.JLabel();
        jDialog4 = new javax.swing.JDialog();
        jPanel1 = new javax.swing.JPanel();
        jDialog5 = new javax.swing.JDialog();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jDialog6 = new javax.swing.JDialog();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jDialog7 = new javax.swing.JDialog();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jToolBar1 = new javax.swing.JToolBar();
        jButton1 = new javax.swing.JButton();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(50, 0), new java.awt.Dimension(50, 0), new java.awt.Dimension(50, 32767));
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(20, 0), new java.awt.Dimension(20, 0), new java.awt.Dimension(20, 32767));
        jButton8 = new javax.swing.JButton();
        filler3 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 32767));
        jButton9 = new javax.swing.JButton();
        filler4 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 32767));
        jButton10 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        lecout = new javax.swing.JButton();
        graphDesign1 = new graphtheory.GraphDesign();
        jLabel4 = new javax.swing.JLabel();
        orio = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        adver = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        adedg = new javax.swing.JLabel();
        Parametre = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        nouveau = new javax.swing.JMenuItem();
        ouvrir = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        sortir = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        BFS = new javax.swing.JMenuItem();
        DFS = new javax.swing.JMenuItem();
        Kruskal = new javax.swing.JMenuItem();
        Prim = new javax.swing.JMenuItem();
        Dijkstra = new javax.swing.JMenuItem();
        Bellman_Ford = new javax.swing.JMenuItem();
        warshall = new javax.swing.JMenuItem();
        Ford_Fulkerson = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();

        jDialog1.setTitle("Cout");

        jLabel1.setText("prédécesseur");

        jLabel2.setText("successeur");

        jLabel3.setText("cout");

        jButton12.setText("ajouter");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        jButton13.setText("sortir");
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog1Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGap(49, 49, 49)
                .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(C, javax.swing.GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE)
                    .addComponent(V)
                    .addComponent(U))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDialog1Layout.createSequentialGroup()
                .addGap(68, 68, 68)
                .addComponent(jButton13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 119, Short.MAX_VALUE)
                .addComponent(jButton12)
                .addGap(89, 89, 89))
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog1Layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(U, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(44, 44, 44)
                .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(V, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(53, 53, 53)
                .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(C, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton12)
                    .addComponent(jButton13))
                .addGap(33, 33, 33))
        );

        jDialog2.setTitle("matrice");

        javax.swing.GroupLayout pan1Layout = new javax.swing.GroupLayout(pan1);
        pan1.setLayout(pan1Layout);
        pan1Layout.setHorizontalGroup(
            pan1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        pan1Layout.setVerticalGroup(
            pan1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 246, Short.MAX_VALUE)
        );

        s.setText("exit");
        s.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sActionPerformed(evt);
            }
        });

        valider.setText("Submit");
        valider.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                validerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pan2Layout = new javax.swing.GroupLayout(pan2);
        pan2.setLayout(pan2Layout);
        pan2Layout.setHorizontalGroup(
            pan2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pan2Layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addComponent(s)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 145, Short.MAX_VALUE)
                .addComponent(valider)
                .addGap(87, 87, 87))
        );
        pan2Layout.setVerticalGroup(
            pan2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pan2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pan2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(s)
                    .addComponent(valider))
                .addContainerGap())
        );

        javax.swing.GroupLayout jDialog2Layout = new javax.swing.GroupLayout(jDialog2.getContentPane());
        jDialog2.getContentPane().setLayout(jDialog2Layout);
        jDialog2Layout.setHorizontalGroup(
            jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pan2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pan1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jDialog2Layout.setVerticalGroup(
            jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog2Layout.createSequentialGroup()
                .addComponent(pan1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pan2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jDialog3.setTitle("le flox max");

        jLabel6.setText("le flox max est :");

        leflot.setText("jLabel7");

        javax.swing.GroupLayout jDialog3Layout = new javax.swing.GroupLayout(jDialog3.getContentPane());
        jDialog3.getContentPane().setLayout(jDialog3Layout);
        jDialog3Layout.setHorizontalGroup(
            jDialog3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog3Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jLabel6)
                .addGap(41, 41, 41)
                .addComponent(leflot, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(153, Short.MAX_VALUE))
        );
        jDialog3Layout.setVerticalGroup(
            jDialog3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog3Layout.createSequentialGroup()
                .addGap(107, 107, 107)
                .addGroup(jDialog3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(leflot))
                .addContainerGap(179, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 353, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 231, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jDialog4Layout = new javax.swing.GroupLayout(jDialog4.getContentPane());
        jDialog4.getContentPane().setLayout(jDialog4Layout);
        jDialog4Layout.setHorizontalGroup(
            jDialog4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jDialog4Layout.setVerticalGroup(
            jDialog4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jLabel7.setText("| E |    =");

        jLabel8.setText("| V |     =");

        jLabel9.setText("jLabel9");

        jLabel10.setText("jLabel10");

        jLabel11.setText("densité =");

        jLabel12.setText("jLabel12");

        javax.swing.GroupLayout jDialog5Layout = new javax.swing.GroupLayout(jDialog5.getContentPane());
        jDialog5.getContentPane().setLayout(jDialog5Layout);
        jDialog5Layout.setHorizontalGroup(
            jDialog5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog5Layout.createSequentialGroup()
                .addGap(62, 62, 62)
                .addGroup(jDialog5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jDialog5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel8)
                        .addComponent(jLabel7))
                    .addComponent(jLabel11))
                .addGap(28, 28, 28)
                .addGroup(jDialog5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12)
                    .addComponent(jLabel10)
                    .addComponent(jLabel9))
                .addContainerGap(222, Short.MAX_VALUE))
        );
        jDialog5Layout.setVerticalGroup(
            jDialog5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog5Layout.createSequentialGroup()
                .addGap(67, 67, 67)
                .addGroup(jDialog5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel9))
                .addGap(78, 78, 78)
                .addGroup(jDialog5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jLabel10))
                .addGap(48, 48, 48)
                .addGroup(jDialog5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jLabel12))
                .addContainerGap(64, Short.MAX_VALUE))
        );

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout jDialog6Layout = new javax.swing.GroupLayout(jDialog6.getContentPane());
        jDialog6.getContentPane().setLayout(jDialog6Layout);
        jDialog6Layout.setHorizontalGroup(
            jDialog6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog6Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(30, Short.MAX_VALUE))
        );
        jDialog6Layout.setVerticalGroup(
            jDialog6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog6Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(29, Short.MAX_VALUE))
        );

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        javax.swing.GroupLayout jDialog7Layout = new javax.swing.GroupLayout(jDialog7.getContentPane());
        jDialog7.getContentPane().setLayout(jDialog7Layout);
        jDialog7Layout.setHorizontalGroup(
            jDialog7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog7Layout.createSequentialGroup()
                .addGap(105, 105, 105)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(129, Short.MAX_VALUE))
        );
        jDialog7Layout.setVerticalGroup(
            jDialog7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog7Layout.createSequentialGroup()
                .addGap(65, 65, 65)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(107, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/new.png"))); // NOI18N
        jButton1.setFocusable(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton1);
        jToolBar1.add(filler1);

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/ajout_noeud.png"))); // NOI18N
        jButton4.setToolTipText("ajouter un noeud");
        jButton4.setFocusable(false);
        jButton4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton4.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton4);

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/ajout_aret.png"))); // NOI18N
        jButton5.setToolTipText("ajouter une arête");
        jButton5.setFocusable(false);
        jButton5.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton5.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton5);
        jToolBar1.add(filler2);

        jButton8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/supprimer_tout.png"))); // NOI18N
        jButton8.setToolTipText("supprimer tout");
        jButton8.setFocusable(false);
        jButton8.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton8.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton8);
        jToolBar1.add(filler3);

        jButton9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/orientation.png"))); // NOI18N
        jButton9.setToolTipText("Orientation");
        jButton9.setFocusable(false);
        jButton9.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton9.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton9);
        jToolBar1.add(filler4);

        jButton10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/martice.png"))); // NOI18N
        jButton10.setToolTipText("matrice");
        jButton10.setFocusable(false);
        jButton10.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton10.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton10);

        jButton11.setText("afficher");
        jButton11.setFocusable(false);
        jButton11.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton11.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton11);

        lecout.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/cout.png"))); // NOI18N
        lecout.setToolTipText("modifier le cout");
        lecout.setFocusable(false);
        lecout.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lecout.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        lecout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lecoutActionPerformed(evt);
            }
        });
        jToolBar1.add(lecout);

        graphDesign1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                graphDesign1MouseDragged(evt);
            }
        });
        graphDesign1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                graphDesign1MouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                graphDesign1MousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                graphDesign1MouseReleased(evt);
            }
        });

        javax.swing.GroupLayout graphDesign1Layout = new javax.swing.GroupLayout(graphDesign1);
        graphDesign1.setLayout(graphDesign1Layout);
        graphDesign1Layout.setHorizontalGroup(
            graphDesign1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1026, Short.MAX_VALUE)
        );
        graphDesign1Layout.setVerticalGroup(
            graphDesign1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 582, Short.MAX_VALUE)
        );

        jLabel4.setText("orientation :");

        orio.setText("false");

        jLabel22.setText("vertex :");

        adver.setText("false");

        jLabel5.setText("edge :");

        adedg.setText("false");

        jMenu1.setText("File");

        nouveau.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        nouveau.setText("New");
        nouveau.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nouveauActionPerformed(evt);
            }
        });
        jMenu1.add(nouveau);

        ouvrir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        ouvrir.setText("Open");
        jMenu1.add(ouvrir);
        jMenu1.add(jSeparator1);

        sortir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        sortir.setText("Exit");
        sortir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortirActionPerformed(evt);
            }
        });
        jMenu1.add(sortir);

        Parametre.add(jMenu1);

        jMenu3.setText("Algorithm");

        BFS.setText("BFS");
        BFS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BFSActionPerformed(evt);
            }
        });
        jMenu3.add(BFS);

        DFS.setText("DFS");
        DFS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DFSActionPerformed(evt);
            }
        });
        jMenu3.add(DFS);

        Kruskal.setText("Kruskal");
        Kruskal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                KruskalActionPerformed(evt);
            }
        });
        jMenu3.add(Kruskal);

        Prim.setText("Prim");
        Prim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PrimActionPerformed(evt);
            }
        });
        jMenu3.add(Prim);

        Dijkstra.setText("Dijkstra");
        Dijkstra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DijkstraActionPerformed(evt);
            }
        });
        jMenu3.add(Dijkstra);

        Bellman_Ford.setText("Bellman_Ford");
        Bellman_Ford.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Bellman_FordActionPerformed(evt);
            }
        });
        jMenu3.add(Bellman_Ford);

        warshall.setText("warshall ");
        warshall.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                warshallActionPerformed(evt);
            }
        });
        jMenu3.add(warshall);

        Ford_Fulkerson.setText("Ford_Fulkerson");
        Ford_Fulkerson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Ford_FulkersonActionPerformed(evt);
            }
        });
        jMenu3.add(Ford_Fulkerson);

        Parametre.add(jMenu3);

        jMenu4.setText("caractéristique");

        jMenuItem1.setText("matrice");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem1);

        jMenuItem2.setText("ordre et taille");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem2);

        jMenuItem3.setText("liste graphe");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem3);

        Parametre.add(jMenu4);

        setJMenuBar(Parametre);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(219, 219, 219)
                .addComponent(jLabel4)
                .addGap(11, 11, 11)
                .addComponent(orio, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50)
                .addComponent(jLabel22)
                .addGap(18, 18, 18)
                .addComponent(adver, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(48, 48, 48)
                .addComponent(jLabel5)
                .addGap(26, 26, 26)
                .addComponent(adedg, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(graphDesign1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(56, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(orio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel22, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(adver, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(adedg, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(9, 9, 9)
                .addComponent(graphDesign1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(30, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {adedg, adver, jLabel22, jLabel4, jLabel5, orio});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nouveauActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nouveauActionPerformed
        GraphInterface s=new GraphInterface();
        dispose();
        s.setVisible(true);
    }//GEN-LAST:event_nouveauActionPerformed

    private void sortirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortirActionPerformed
        System.exit(0);
    }//GEN-LAST:event_sortirActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
         GraphInterface s=new GraphInterface(); 
         s.setVisible(true);
        
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void graphDesign1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_graphDesign1MouseClicked
        
        
        if (addvertex==true) {
        Graphics g=graphDesign1.getGraphics();
        list_nou.add(new Vertex(num, new Ellipse2D.Float(evt.getX()-25, evt.getY()-25, 50, 50)));
        
        graphDesign1.paintComponent(g);
        num++;
        }
        
        
        
       
    }//GEN-LAST:event_graphDesign1MouseClicked

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        if (this.addvertex==false) {
            addvertex=true;
        } else {
            addvertex=false;
        }
        
        
         if (addvertex==true) {
            this.adver.setText("true");
        } else {
            this.adver.setText("false");
        }
        if (addedge==true) {
            this.adedg.setText("true");
        } else {
            this.adedg.setText("false");
        }
        if (sym==true) {
            this.orio.setText("false");
        } else {
            this.orio.setText("true");
        }
        this.dessi.clear();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        String input =JOptionPane.showInputDialog("Enter an input");
        if (input!=null) {
            int a=Integer.parseInt(input);


        pan1.removeAll();

        pan1.setLayout(new GridLayout(a, a));
        for (int i = 0; i < a*a; i++) {
            table.add(new JTextField());
            
        }
        
        
        for (int i = 0; i < table.size(); i++) {
               table.get(i).setColumns(2);
        }
        for (int i = 0; i < table.size(); i++) {
            
               pan1.add(table.get(i));
            
        }
        
        pan2.setLayout(new GridLayout(1, 2));
        pan2.add(s);
        pan2.add(valider);
        jDialog2.setLayout(new BorderLayout());
        jDialog2.add(pan2,BorderLayout.SOUTH);
        jDialog2.add(pan1,BorderLayout.CENTER);
        jDialog2.pack();

          jDialog2.setVisible(true);
        }

    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        
        Graphics g=graphDesign1.getGraphics();
        graphDesign1.paintComponent(g);
    }//GEN-LAST:event_jButton11ActionPerformed

    private void graphDesign1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_graphDesign1MousePressed
 
 if (dessi.size()==2) {
            dessi.clear();
        }
for (int i = 0; i < list_nou.size(); i++) {
            Ellipse2D get = list_nou.get(i).getNodes();
            if (get.contains(evt.getPoint())) {
                            System.out.println(list_nou.get(i).getNom());
                            this.dessi.add(list_nou.get(i).getNom());
                            dragged = get;
                            // Adjust for the different between the top/left corner of the
                            // node and the point it was clicked...
                            offset = new Point(get.getBounds().x - evt.getX(), get.getBounds().y - evt.getY());
                            // Highlight the clicked node
                           
                            break;
                            

                        }

        }

        if (dessi.size()==2 && addedge==true && sym==true) {
            for (int i = 0; i < dessi.size()-1; i++) {
            System.out.println("h "+dessi.get(i)+" "+dessi.get(i+1));
            liste_edges.add(new Edge(dessi.get(i), dessi.get(i+1), 1));
        }
               for (int i =dessi.size()-1;i>0; i--) {
            System.out.println("h "+dessi.get(i)+" "+dessi.get(i-1));
            liste_edges.add(new Edge(dessi.get(i),dessi.get(i-1), 1));
        }
        }
        if (dessi.size()==2 && addedge==true && sym==false) {
            for (int i = 0; i < dessi.size()-1; i++) {
            System.out.println("h "+dessi.get(i)+" "+dessi.get(i+1));
            liste_edges.add(new Edge(dessi.get(i), dessi.get(i+1), 1));
        }
          
        }
        

Graphics g=graphDesign1.getGraphics();
        
        graphDesign1.paintComponent(g);
    }//GEN-LAST:event_graphDesign1MousePressed

    private void graphDesign1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_graphDesign1MouseReleased
        if (dragged != null) {
                        
                    }
                    dragged = null;
                    offset = null;
                    Graphics g=graphDesign1.getGraphics();
        
        graphDesign1.paintComponent(g);
    }//GEN-LAST:event_graphDesign1MouseReleased

    private void graphDesign1MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_graphDesign1MouseDragged
        if (dragged != null && offset != null) {
                        // Adjust the position of the drag point to allow for the
                        // click point offset
                        Point to = evt.getPoint();
                        to.x += offset.x;
                        to.y += offset.y;

                        // Modify the position of the node...
                        Rectangle bounds = dragged.getBounds();
                        bounds.setLocation(to);
                        dragged.setFrame(bounds);

                        
                    }
        Graphics g=graphDesign1.getGraphics();
        
        graphDesign1.paintComponent(g);
    }//GEN-LAST:event_graphDesign1MouseDragged

    private void lecoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lecoutActionPerformed
jDialog1.setVisible(true);
jDialog1.setSize(388, 330);
        
    }//GEN-LAST:event_lecoutActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        
       try {
             int u=Integer.parseInt(U.getText());
        int v=Integer.parseInt(V.getText());
        int c=Integer.parseInt(C.getText());
        System.out.println(u+" "+v+" "+c);
        if (sym==true) {
            for (int i = 0; i < liste_edges.size(); i++) {
                Edge get = liste_edges.get(i);
                if (get.getU()==u && get.getV()==v) {
                    get.setCout(c);
                }
                if (get.getU()==v && get.getV()==u) {
                    get.setCout(c);
                }
            }
        }else{
            for (int i = 0; i < liste_edges.size(); i++) {
                Edge get = liste_edges.get(i);
                if (get.getU()==u && get.getV()==v) {
                    get.setCout(c);
                }
               
            }
        }
        
        for (int i = 0; i < liste_edges.size(); i++) {
            Edge get = liste_edges.get(i);
            //System.out.println(get.getCout()+ " ");
        }
        
        Graphics g=graphDesign1.getGraphics();
        
        graphDesign1.paintComponent(g);
        } catch (Exception e) {
            
        }
    }//GEN-LAST:event_jButton12ActionPerformed

    private void BFSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BFSActionPerformed
    String input =JOptionPane.showInputDialog("Enter le noued de depart");
        if (input!=null) {
            int a=Integer.parseInt(input);
         Graphe<Vertex> graph1 = new UnweightedGraph<Vertex>(liste_edges, list_nou);
         List<Integer> no=new ArrayList<>();
            no=graph1.BFS(a);

            List<Vertex> list_n =new ArrayList<>();
            for (int i = 0; i < no.size(); i++) {
                System.out.print (no.get(i)+" ");
                list_n.add(new Vertex(no.get(i), new Ellipse2D.Float((int)(Math.random()*450), (int)(Math.random()*450), 50, 50)));
                
            }
            
            List<Edge> liste_ed =new ArrayList<>();
            List<Integer> sos=new ArrayList<>();
            List<Integer> des=new ArrayList<>();
            sos=graph1.getSource();
            des=graph1.getDest();
            if (sym==true) {
                for (int i = 0; i < des.size(); i++) {
                    liste_ed.add(new Edge(sos.get(i), des.get(i), 1));
                    System.out.println(sos.get(i)+"----"+ des.get(i));
                    liste_ed.add(new Edge( des.get(i),sos.get(i), 1));
                }
            } else {
                for (int i = 0; i < des.size(); i++) {
                    liste_ed.add(new Edge(sos.get(i), des.get(i), 1));
                    System.out.println(sos.get(i)+"---->"+ des.get(i));
                }
            }
            
              
                FrameRes f=new FrameRes(list_n, liste_ed, sym ,"BFS",no);
                
                 f.setVisible(true);
                
//            if (sym==true) {
//                for (int i = 0; i < list_n.size()-1; i++) {
//                    
////                     liste_ed.add(new Edge(list_n.get(i).getNom(),list_n.get(i+1).getNom(),1));
//System.out.print("d"+list_n.get(i).getNom()+"d"+list_n.get(i+1).getNom()+"D");
//                     
//                }
//                for (int i = list_n.size()-1; i > 0; i--) {
//                    
////                     liste_ed.add(new Edge(list_n.get(i).getNom(),list_n.get(i-1).getNom(),1));
//                     System.out.print("r"+list_n.get(i).getNom()+"r"+list_n.get(i-1).getNom()+"R");
//                }
//               
//            } if(sym==false) {
//                for (int i = 0; i < list_n.size()-1; i++) {
//                    
////                     liste_ed.add(new Edge(list_n.get(i).getNom(),list_n.get(i+1).getNom(),1));
////System.out.print(list_n.get(i).getNom()+" "+list_n.get(i+1).getNom());
//                     
//                }
//            }
//            
            
            
            
        }
    }//GEN-LAST:event_BFSActionPerformed

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        jDialog1.dispose();
    }//GEN-LAST:event_jButton13ActionPerformed

    private void validerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_validerActionPerformed
        
        list_nou.clear();
        liste_edges.clear();
        num=0;
        this.sym=true;
        
        
        
        for (int i = 0; i < table.size(); i++) {
            
                matrice.add(Integer.parseInt(table.get(i).getText()));
               
            
        }
        
       int a =(int) Math.sqrt(matrice.size());
        int matrix[][]=new int[a][a];
        
        int p=0;
        for (int i = 0; i <a; i++) {
            for (int j = 0; j < a; j++) {
                matrix[i][j]=matrice.get(p);
                p++;
            }
        }
          ajouterVertexEdges(matrix);
           symetrie(matrix);
           
           
        graphDesign1.paintComponent(graphDesign1.getGraphics());
        table.clear();
        matrice.clear();
        
        jDialog2.dispose();
        
    }//GEN-LAST:event_validerActionPerformed

    private void sActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sActionPerformed
        table.clear();
        jDialog2.dispose();
        
    }//GEN-LAST:event_sActionPerformed

    private void DFSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DFSActionPerformed
        String input =JOptionPane.showInputDialog("Enter le noued de depart");
        if (input!=null) {
            int a=Integer.parseInt(input);
         Graphe<Vertex> graph1 = new UnweightedGraph<Vertex>(liste_edges, list_nou);
         graph1.DFS(a);
         List<Integer> no=new ArrayList<>();
         no=graph1.getDfsres();
         List<Vertex> list_n =new ArrayList<>();
            for (int i = 0; i < no.size(); i++) {
                System.out.print (no.get(i)+" ");
                list_n.add(new Vertex(no.get(i), new Ellipse2D.Float((int)(Math.random()*450), (int)(Math.random()*450), 50, 50)));
                
            }
            List<Edge> liste_ed =new ArrayList<>();
            List<Integer> sos=new ArrayList<>();
            List<Integer> des=new ArrayList<>();
            sos=graph1.getSourcedfs();
            des=graph1.getDestdfs();
            if (this.sym==true) {
                for (int i = 0; i < des.size(); i++) {
                    
                liste_ed.add(new Edge( des.get(i),sos.get(i), 1));
                System.out.println(des.get(i)+"--->"+sos.get(i));
                liste_ed.add(new Edge( sos.get(i),des.get(i), 1));
                
            }
            } else {
                for (int i = 0; i < des.size(); i++) {
                liste_ed.add(new Edge( des.get(i),sos.get(i), 1));
                System.out.println(des.get(i)+"--->"+sos.get(i));
                
            }
                
                
            }
            
            FrameRes f=new FrameRes(list_n, liste_ed, sym ,"DFS",no);
                
                 f.setVisible(true);
//            
//            for (int i = 0; i < no.size(); i++) {
//                System.out.println(""+no.get(i));
//                
//            }

        
        }
    }//GEN-LAST:event_DFSActionPerformed

    private void KruskalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_KruskalActionPerformed
         Edge[] edg=new Edge[liste_edges.size()];
        for (int i = 0; i < liste_edges.size(); i++) {
             edg[i]= liste_edges.get(i);
            
        }
        int acm=0;
        Graphe<Vertex> graph1 = new UnweightedGraph<Vertex>(liste_edges, list_nou);
        graph1.KruskalMST(edg);
        List<Integer> sos=new ArrayList<>();
        List<Integer> des=new ArrayList<>();
        List<Integer> cout=new ArrayList<>();
        sos=graph1.getKruskalsource();
        des=graph1.getKruskaldest();
        cout=graph1.getKruskalcout();
        List<Edge> liste_ed =new ArrayList<>();
        for (int i = 0; i < cout.size(); i++) {
            acm+=cout.get(i);
            
        }
        if (sym==true) {
            for (int i = 0; i < cout.size(); i++) {
            liste_ed.add(new Edge( sos.get(i),des.get(i), cout.get(i)));
            liste_ed.add(new Edge( des.get(i),sos.get(i), cout.get(i)));
            
        }
            FrameRes f=new FrameRes(list_nou, liste_ed, sym ,"Kruskal",acm);
                
                 f.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this, "graphe est orienté impossible",
         " erreur ",
         JOptionPane.WARNING_MESSAGE);
        }
            
        
        
                
        
        
    }//GEN-LAST:event_KruskalActionPerformed

    private void PrimActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PrimActionPerformed
           int graphee [][]=new int[list_nou.size()][list_nou.size()];
        for (int i = 0; i < list_nou.size(); i++) {
            for (int j = 0; j < list_nou.size(); j++) {
                for (int k = 0; k < liste_edges.size(); k++) {
                    if (i==liste_edges.get(k).getU() && j==liste_edges.get(k).getV()) {
                    graphee[i][j]=liste_edges.get(k).getCout();
                    
                }
                }
  
            }
        }
        int acm=0;
        Graphe<Vertex> graph1 = new UnweightedGraph<Vertex>(liste_edges, list_nou);
        graph1.primMST(graphee);
        List<Integer> sos=new ArrayList<>();
        List<Integer> des=new ArrayList<>();
        List<Integer> cout=new ArrayList<>();
        sos=graph1.getPrimsource();
        des=graph1.getPrimdest();
        cout=graph1.getPrimcout();
        List<Edge> liste_ed =new ArrayList<>();
        for (int i = 0; i < cout.size(); i++) {
            acm+=cout.get(i);
            
        }
        System.out.println(acm+"");
        
        if (sym==true) {
            for (int i = 0; i < cout.size(); i++) {
            liste_ed.add(new Edge( sos.get(i),des.get(i), cout.get(i)));
            liste_ed.add(new Edge( des.get(i),sos.get(i), cout.get(i)));
                System.out.println(sos.get(i)+"----"+ des.get(i)+"=="+cout.get(i));
            
        }
            FrameRes f=new FrameRes(list_nou, liste_ed, sym ,"Prim",acm);
                
                 f.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this, "graphe est orienté impossible",
         " erreur ",
         JOptionPane.WARNING_MESSAGE);
        }
            
    }//GEN-LAST:event_PrimActionPerformed

    private void DijkstraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DijkstraActionPerformed
        jTextArea2.setText("");
        int graphee [][]=new int[list_nou.size()][list_nou.size()];
        for (int i = 0; i < list_nou.size(); i++) {
            for (int j = 0; j < list_nou.size(); j++) {
                for (int k = 0; k < liste_edges.size(); k++) {
                    if (i==liste_edges.get(k).getU() && j==liste_edges.get(k).getV()) {
                    graphee[i][j]=liste_edges.get(k).getCout();
                    
                }
                }
  
            }
        }
        Graphe<Vertex> graph1 = new UnweightedGraph<Vertex>(liste_edges, list_nou);
        String input =JOptionPane.showInputDialog("Enter le noued de depart");
        if (input!=null) {
            int s=Integer.parseInt(input);
            graph1.dijkstra(graphee, s);
            List<Integer> ver=new ArrayList<>();
             List<Integer> cou=new ArrayList<>();
             ver=graph1.getDijkstraVER();
             cou=graph1.getDijkstraCOU();
             jTextArea2.append("noeud-----distance"+s+"\n");
             for (int i = 0; i < cou.size(); i++) {
                jTextArea2.append(ver.get(i)+" |--------| "+cou.get(i)+"\n");
                
            }
        }
        jDialog7.setVisible(true);
        jDialog7.setSize(500, 500);
        
    }//GEN-LAST:event_DijkstraActionPerformed

    private void Bellman_FordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Bellman_FordActionPerformed
        jTextArea2.setText("");
        Edge[] edg=new Edge[liste_edges.size()];
        for (int i = 0; i < liste_edges.size(); i++) {
             edg[i]= liste_edges.get(i);
            
        }
        
        Graphe<Vertex> graph1 = new UnweightedGraph<Vertex>(liste_edges, list_nou);
        String input =JOptionPane.showInputDialog("Enter le noued de depart");
        if (input!=null) {
            int s=Integer.parseInt(input);
            graph1.BellmanFord(edg, s);
             List<Integer> ver=new ArrayList<>();
             List<Integer> cou=new ArrayList<>();
             ver=graph1.getBelmanVER();
             cou=graph1.getBelmanCOU();
             jTextArea2.append("noeud-----distance "+s+"\n");
             for (int i = 0; i < cou.size(); i++) {
                jTextArea2.append(ver.get(i)+" |--------| "+cou.get(i)+"\n");
                
            }
        }
        
        jDialog7.setVisible(true);
        jDialog7.setSize(500, 500);
    }//GEN-LAST:event_Bellman_FordActionPerformed

    private void Ford_FulkersonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Ford_FulkersonActionPerformed
        int graphee [][]=new int[list_nou.size()][list_nou.size()];
        for (int i = 0; i < list_nou.size(); i++) {
            for (int j = 0; j < list_nou.size(); j++) {
                for (int k = 0; k < liste_edges.size(); k++) {
                    if (i==liste_edges.get(k).getU() && j==liste_edges.get(k).getV()) {
                    graphee[i][j]=liste_edges.get(k).getCout();
                    
                }
                }
  
            }
        }
         Graphe<Vertex> graph1 = new UnweightedGraph<Vertex>(liste_edges, list_nou);
         String input =JOptionPane.showInputDialog("Enter le noued source");
         if (input!=null) {
             String input1 =JOptionPane.showInputDialog("Enter le puit");
             if (input1!=null) {
                 int s=Integer.parseInt(input);
                 int p=Integer.parseInt(input1);
                 this.leflot.setText(graph1.fordFulkerson(graphee, s, p)+"");
                 jDialog3.setVisible(true);
                 jDialog3.setSize(500, 500);
             }
        }
         
         
        
    }//GEN-LAST:event_Ford_FulkersonActionPerformed

    private void warshallActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_warshallActionPerformed
        int graphee [][]=new int[list_nou.size()][list_nou.size()];
//         for (int i = 0; i < list_nou.size(); i++) {
//             for (int j = 0; j < list_nou.size(); j++) {
//                 graphee[i][j]=0;
//                 for (int k = 0; k < wirs.size(); k++) {
//                     if ( wirs.get(k) == (j+(i*list_nou.size())) ) {
//                         graphee[i][j]=1;
//                     }
//                     
//                 }
//             }
//        }

        for (int i = 0; i < list_nou.size(); i++) {
            for (int j = 0; j < list_nou.size(); j++) {
                for (int k = 0; k < liste_edges.size(); k++) {
                    if (i==liste_edges.get(k).getU() && j==liste_edges.get(k).getV()) {
                    graphee[i][j]=liste_edges.get(k).getCout();
                    
                }
                }
  
            }
        }
        for (int i = 0; i < list_nou.size(); i++) {
            for (int j = 0; j < list_nou.size(); j++) {
                if ( i!=j) {
                    if (graphee[i][j]==0) {
                         graphee[i][j]=99999;
                    }
                }
            }
        }
        
        for (int i = 0; i < graphee.length; i++) {
            for (int j = 0; j < graphee[i].length; j++) {
                System.out.print(graphee[i][j]+"---");
            }System.out.println();
        }
        Graphe<Vertex> graph1 = new UnweightedGraph<Vertex>(liste_edges, list_nou);
        int g[][]=new int[list_nou.size()][list_nou.size()];
        g=graph1.floydWarshall(graphee);
        
        for (int i=0; i<g[0].length; ++i) 
        { 
            for (int j=0; j<g[0].length; ++j) 
            { 
                if (g[i][j]==99999) 
                    System.out.print("INF "); 
                else
                    System.out.print(g[i][j]+"   "); 
            } 
            System.out.println(); 
        } 
        List<Edge> liste_ed =new ArrayList<>();
        for (int i = 0; i < graphee.length; i++) {
            for (int j = 0; j < graphee[i].length; j++) {
                if (i!=j) {
                    if (g[i][j]!=99999) {
                        liste_ed.add(new Edge(i, j, g[i][j]));
                    }
 
                }
            }
        }
        
        FrameRes f=new FrameRes(list_nou, liste_ed, sym );
                
                 f.setVisible(true);
        
    }//GEN-LAST:event_warshallActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        if (this.addedge==false) {
            addedge=true;
        } else {
            addedge=false;
        }
        
        
        if (addvertex==true) {
            this.adver.setText("true");
        } else {
            this.adver.setText("false");
        }
        if (addedge==true) {
            this.adedg.setText("true");
        } else {
            this.adedg.setText("false");
        }
        if (sym==true) {
            this.orio.setText("false");
        } else {
            this.orio.setText("true");
        }
        this.dessi.clear();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
       if (this.sym==false) {
            sym=true;
        } else {
            sym=false;
        } 
       
       
        if (addvertex==true) {
            this.adver.setText("true");
        } else {
            this.adver.setText("false");
        }
        if (addedge==true) {
            this.adedg.setText("true");
        } else {
            this.adedg.setText("false");
        }
        if (sym==true) {
            this.orio.setText("false");
        } else {
            this.orio.setText("true");
        }
       this.dessi.clear();
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        this.list_nou.clear();
        this.liste_edges.clear();
        this.num=0;
        
        Graphics g=graphDesign1.getGraphics();
        
        graphDesign1.paintComponent(g);
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
       jPanel1.removeAll();
        if (!list_nou.isEmpty()) {
             int graphee [][]=new int[list_nou.size()][list_nou.size()];
         for (int i = 0; i < list_nou.size(); i++) {
             for (int j = 0; j < list_nou.size(); j++) {
                 graphee[i][j]=0;
             }
        }
                for (int i = 0; i < list_nou.size(); i++) {
            for (int j = 0; j < list_nou.size(); j++) {
                for (int k = 0; k < liste_edges.size(); k++) {
                    if (i==liste_edges.get(k).getU() && j==liste_edges.get(k).getV()) {
                    graphee[i][j]=1;
                    
                }
                }
  
            }
        }
        List<JLabel> label =new ArrayList<>();
        jPanel1.setLayout(new GridLayout(list_nou.size(), list_nou.size()));
        for (int i = 0; i < list_nou.size()*list_nou.size(); i++) {
            label.add(new JLabel());
            
        }
        for (int i = 0; i < list_nou.size(); i++) {
            for (int j = 0; j < list_nou.size(); j++) {
                label.get((i*list_nou.size())+j).setText(graphee[i][j]+"");
            }
        }
        
        
        for (int i = 0; i < label.size(); i++) {
            
               jPanel1.add(label.get(i));
            
        }
        
        
        
        jDialog4.pack();

          jDialog4.setVisible(true);
        }
          
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        
//        int d =(e)/(v*v-v);
//        int da =(e)/(v*v-v);
//        
        
        
        if (sym==true) {
            int e=liste_edges.size();
            int v=list_nou.size();
            jLabel9.setText(e/2+"");
            jLabel10.setText(v+"");
            jLabel12.setText(((double)e)/(v*v-v)+"");
        }else {
            int e=liste_edges.size();
            int v=list_nou.size();
            jLabel9.setText(e+"");
            jLabel10.setText(v+"");
            jLabel12.setText(((double)e)/(v*v-v)+"");
        }
        jDialog5.setVisible(true);
        jDialog5.setSize(400, 400);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
    jTextArea1.setText("");
    
    Graphe<Vertex> graph1 = new UnweightedGraph<Vertex>(liste_edges, list_nou);
    List<Integer> arr=new ArrayList<>();
        for (int i = 0; i < list_nou.size(); i++) {
            arr=graph1.getNeighbors(i);
            for (int j = 0; j < arr.size(); j++) {
                jTextArea1.append(arr.get(j)+"---");
                
            }
            jTextArea1.append("\n");
        }
    jDialog6.setVisible(true);
    jDialog6.setSize(500, 500);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GraphInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GraphInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GraphInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GraphInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GraphInterface().setVisible(true);
            }
        });
    }
    public void ajouterVertexEdges(int mtr [][]){
        for (int i = 0; i < mtr.length; i++) {
            
            list_nou.add(new Vertex((num++), new Ellipse2D.Float((int)(Math.random()*450), (int)(Math.random()*450), 50, 50)));
        }
        this.wirs.clear();
        for (int i = 0; i < mtr.length; i++) {
            for (int j = 0; j < mtr.length; j++) {
                if (mtr[i][j]==1) {
                    liste_edges.add(new Edge(i, j,1));
                    
                }
            }
 
        }
        
    
    }
    public void symetrie(int mtr[][] ){
        rept:for (int i = 0; i < mtr.length; i++) {
                for (int j = 0; j < mtr.length; j++) {
                    if (i!=j) {
                         if (mtr[i][j]!=mtr[j][i]) {
                        sym=false;
                        
                        break rept;
                        
                        
                    }
                }
            }
        }
    
    }
    int num=0;
    private List<Integer> dessi =new ArrayList<>();
   //table de la matrice adj
  private List<Integer> wirs =new ArrayList<>();
  private List<JTextField> table=new ArrayList<>();
   boolean addvertex=false;//non ajouter
   boolean addedge=false;//non ajouter
   boolean orientation=false;//non orienté
   public static List<Edge> liste_edges =new ArrayList<>();
   //la mtrice d'adjacence sous forme d'une liste
   private List<Integer> matrice =new ArrayList<>();
   // la mtrice d'adjacence sous forme d'un tableau
   
   // liste des noeuds
   public static List<Vertex> list_nou =new ArrayList<>();
   private Ellipse2D dragged;
        private Point offset;
        public static boolean sym=true;
        FrameRes f;
        
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem BFS;
    private javax.swing.JMenuItem Bellman_Ford;
    private javax.swing.JTextField C;
    private javax.swing.JMenuItem DFS;
    private javax.swing.JMenuItem Dijkstra;
    private javax.swing.JMenuItem Ford_Fulkerson;
    private javax.swing.JMenuItem Kruskal;
    private javax.swing.JMenuBar Parametre;
    private javax.swing.JMenuItem Prim;
    private javax.swing.JTextField U;
    private javax.swing.JTextField V;
    private javax.swing.JLabel adedg;
    private javax.swing.JLabel adver;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler2;
    private javax.swing.Box.Filler filler3;
    private javax.swing.Box.Filler filler4;
    private graphtheory.GraphDesign graphDesign1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JDialog jDialog2;
    private javax.swing.JDialog jDialog3;
    private javax.swing.JDialog jDialog4;
    private javax.swing.JDialog jDialog5;
    private javax.swing.JDialog jDialog6;
    private javax.swing.JDialog jDialog7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JButton lecout;
    private javax.swing.JLabel leflot;
    private javax.swing.JMenuItem nouveau;
    private javax.swing.JLabel orio;
    private javax.swing.JMenuItem ouvrir;
    private javax.swing.JPanel pan1;
    private javax.swing.JPanel pan2;
    private javax.swing.JButton s;
    private javax.swing.JMenuItem sortir;
    private javax.swing.JButton valider;
    private javax.swing.JMenuItem warshall;
    // End of variables declaration//GEN-END:variables
}
