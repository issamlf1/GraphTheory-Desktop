/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package graphtheory;

import Algorithm.Edge;
import Algorithm.Vertex;
import java.awt.Color;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.geom.AffineTransform;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Line2D;
import java.awt.geom.Rectangle2D;
import java.util.List;

/**
 *
 * @author lanfouf
 */
public class GraphDesign extends javax.swing.JPanel {

    /**
     * Creates new form GraphDesign
     */

    public GraphDesign() {
        initComponents();
        
    }
//    public GraphDesign(List<Vertex> v, List<Edge> e,Boolean bool) {

    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 545, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 358, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    public void paintComponent(Graphics g) {
       // declaration
                 super.paintComponent(g);
        Graphics2D g2d = (Graphics2D)g.create();
        //dessiner les arret
        if (GraphInterface.sym==true) {
          for (int i = 0; i < GraphInterface.liste_edges.size(); i++) {
            Edge get = GraphInterface.liste_edges.get(i);
            int u=get.getU();
            int v=get.getV();
            Ellipse2D get1 = null;
            Ellipse2D get2 = null;
            for (int j = 0; j < GraphInterface.list_nou.size(); j++) {
                if (u==GraphInterface.list_nou.get(j).getNom()) {
                    get1=GraphInterface.list_nou.get(j).getNodes();
                }
                if (v==GraphInterface.list_nou.get(j).getNom()) {
                    get2=GraphInterface.list_nou.get(j).getNodes();
                }    
            }
            Line2D line = new Line2D.Double(get1.getCenterX(), get1.getCenterY(), get2.getCenterX(),get2.getCenterY() );
            get.setLine(line);
            g2d.draw(line);
            
        }  
        }else {
        
             for (int i = 0; i < GraphInterface.liste_edges.size(); i++) {
            Edge get = GraphInterface.liste_edges.get(i);
            int u=get.getU();
            int v=get.getV();
            Ellipse2D get1 = null;
            Ellipse2D get2 = null;
            for (int j = 0; j < GraphInterface.list_nou.size(); j++) {
                if (u==GraphInterface.list_nou.get(j).getNom()) {
                    get1=GraphInterface.list_nou.get(j).getNodes();
                }
                if (v==GraphInterface.list_nou.get(j).getNom()) {
                    get2=GraphInterface.list_nou.get(j).getNodes();
                }    
            }   
            int x1=(int) get1.getCenterX();
            int y1=(int)get1.getCenterY();
            int x2=(int)get2.getCenterX();
            int y2=(int)get2.getCenterY();
            
            Graphics2D g3d = (Graphics2D) g.create();

                double dx = x2 - x1, dy = y2 - y1;
                double angle = Math.atan2(dy, dx);
                int len = (int) Math.sqrt(dx*dx + dy*dy);
                AffineTransform at = AffineTransform.getTranslateInstance(x1, y1);
                at.concatenate(AffineTransform.getRotateInstance(angle));
                g3d.transform(at);

                // Draw horizontal arrow starting in (0, 0)
                
                
                Line2D line =new Line2D.Double(x1, y1, x2,y2);
                Line2D line1 =new Line2D.Double(0, 20, len, 0);
                get.setLine(line);
                g3d.draw(line1);
                g3d.fillPolygon(new int[] {len, len-40, len-40, len},
                              new int[] {0, -4, 4, 0}, 4);
            
             
        }
        }
        
        //dessiner vertex
        for (int i = 0; i < GraphInterface.list_nou.size(); i++) {
            Vertex geto = GraphInterface.list_nou.get(i);
            g2d.setColor(Color.yellow);
            g2d.fill(GraphInterface.list_nou.get(i).getNodes());
            g2d.draw(GraphInterface.list_nou.get(i).getNodes());
            GraphInterface.list_nou.get(i).setX((int) GraphInterface.list_nou.get(i).getNodes().getCenterX());
            GraphInterface.list_nou.get(i).setY((int) GraphInterface.list_nou.get(i).getNodes().getCenterY());
            //dessiner cout
            g2d.setColor(Color.BLUE);
            FontMetrics fm = g.getFontMetrics();
                int textWidth = fm.stringWidth(String.valueOf(GraphInterface.list_nou.get(i).getNom()) );
                int x = GraphInterface.list_nou.get(i).getNodes().getBounds().x;
                int y = GraphInterface.list_nou.get(i).getNodes().getBounds().y;
                int width = GraphInterface.list_nou.get(i).getNodes().getBounds().width;
                int height = GraphInterface.list_nou.get(i).getNodes().getBounds().height;
                g.drawString(String.valueOf(GraphInterface.list_nou.get(i).getNom()),x + ((width - textWidth)) / 2,y + ((height - fm.getHeight()) / 2) + fm.getAscent());
                

            
            
        }
        if (GraphInterface.sym==true) {
            for (int i = 0; i < GraphInterface.liste_edges.size(); i++) {
            
            Edge get = GraphInterface.liste_edges.get(i);
            FontMetrics fo = g.getFontMetrics();
            g.setColor(Color.RED);
            g.setFont(new Font("SansSerif", Font.BOLD, 15));
                int textWidth = fo.stringWidth(String.valueOf(get.getCout()) );
                int x = get.getLine().getBounds().x;
                int y = get.getLine().getBounds().y;
                int width = get.getLine().getBounds().width;
                int height = get.getLine().getBounds().height;
                g.drawString(String.valueOf(get.getCout()),x + ((width - textWidth)) / 2,y + ((height - fo.getHeight()) / 2) + fo.getAscent());
        }
        }
        if (GraphInterface.sym==false) {
            for (int i = 0; i < GraphInterface.liste_edges.size(); i++) {
            
            Edge get = GraphInterface.liste_edges.get(i);
            FontMetrics fo = g.getFontMetrics();
            g.setColor(Color.RED);
            g.setFont(new Font("SansSerif", Font.BOLD, 15));
                int textWidth = fo.stringWidth(String.valueOf(get.getCout()) );
                int x = get.getLine().getBounds().x;
                int y = get.getLine().getBounds().y;
                int width = get.getLine().getBounds().width;
                int height = get.getLine().getBounds().height;
                g.drawString(String.valueOf(get.getCout()),x + ((width - textWidth)) / 2,y + ((height - fo.getHeight()) / 2) + fo.getAscent());
//                System.out.println(String.valueOf(get.getCout()));
        }
        }
        
        
        g2d.dispose();
    }

    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
